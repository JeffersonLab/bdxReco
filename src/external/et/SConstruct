################################
# scons build system file
################################
#
# Much of this file can be used as a boilerplate build file.
#
# The parts that are dependent on the details of the software
# package being compiled are:
#
#   1) the name and version of this software package
#   2) the needed header files and libraries
#   3) what type of documentation needs to be installed
#   4) the scons files to be run in the source directories
#
################################

# Get various python modules
import re, sys, os, string, subprocess, SCons.Node.FS
from subprocess import Popen, PIPE

import utils


Import('env')


# Created files & dirs will have this permission
os.umask(002)

# Software version
versionMajor = '15'
versionMinor = '1'

# Determine the os and machine names
uname    = os.uname();
platform = uname[0]
machine  = uname[4]
osname   = os.getenv('CODA_OSNAME', platform + '-' +  machine)

# Create an environment while importing the user's PATH.
# This allows us to get to the vxworks compiler for example.
# So for vxworks, make sure the tools are in your PATH




# Debug/optimization flags
debugSuffix = ''
debug = ARGUMENTS.get('debug', 0)
if debug:
    debugSuffix = '-dbg'
    # Compile with -g and add debugSuffix to all executable names
    env.Append(CCFLAGS = '-g', PROGSUFFIX = debugSuffix)


execLibs = ['']

# Platform dependent quantities.
# Default to standard Linux libs.
execLibs = ['m', 'pthread', 'dl', 'rt']
    

if platform == 'Darwin':
	execLibs = ['pthread', 'dl']
	env.Append(CPPDEFINES = ['Darwin'], SHLINKFLAGS = ['-multiply_defined', '-undefined',  '-flat_namespace', 'suppress'])
 	env.Append(CCFLAGS = ['-fmessage-length=0'])



# Hidden sub directory into which variant builds go
archDir = '.' + osname + debugSuffix


#########################
# Install stuff
#########################

libInstallDir     = ""
binInstallDir     = ""
incInstallDir     = ""
archIncInstallDir = ""


# If we going to install ...
if 'install' in COMMAND_LINE_TARGETS:
    # Determine installation directories
    installDirs = coda.getInstallationDirs(osname, prefix, incdir, libdir, bindir)
    
    mainInstallDir    = installDirs[0]
    osDir             = installDirs[1]
    incInstallDir     = installDirs[2]
    archIncInstallDir = installDirs[3]
    libInstallDir     = installDirs[4]
    binInstallDir     = installDirs[5]
    
    # Create the include directories (make symbolic link if possible)
    coda.makeIncludeDirs(incInstallDir, archIncInstallDir, osDir, archIncLocalLink)

    print 'Main install dir  = ', mainInstallDir
    print 'bin  install dir  = ', binInstallDir
    print 'lib  install dir  = ', libInstallDir
    print 'inc  install dirs = ', incInstallDir, ", ", archIncInstallDir

else:
    print 'No installation being done'

print




##################################################
# Special Include Directory for java header files
##################################################

# Because we're using JNI, we need access to <jni.h> when compiling. 
if not utils.configureJNI(env):
    print "\nJava Native Interface header is required, set JAVA_HOME, exiting\n"
    Exit(0)




######################################################
# Lower level scons files (software package dependent)
######################################################

# Make available to lower level scons files
Export('env archDir incInstallDir libInstallDir binInstallDir archIncInstallDir execLibs debugSuffix')

# Run lower level build files

env.SConscript('src/libsrc/SConscript',   variant_dir='src/libsrc/'+archDir,   duplicate=0)
env.SConscript('src/execsrc/SConscript',  variant_dir='src/execsrc/'+archDir,  duplicate=0)
env.SConscript('src/examples/SConscript', variant_dir='src/examples/'+archDir, duplicate=0)
